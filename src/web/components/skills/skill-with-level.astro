---
import { Icon } from "@/components/icon";
import Linkable from "@/components/linkable.astro";
import type { AsyncEntry } from "@/types/entries";
import { cn } from "@/utils/cn";

interface Props {
  entry: AsyncEntry<"skills">;
}

const { entry } = Astro.props;
const { data: skill } = await entry;

if (!skill.level) {
  throw new Error(`Skill "${skill.name}" is missing a "level" field.`);
}

const [level, maxLevel] = skill.level.split("/").map(Number) as [
  number,
  number,
];
const iconStyle = skill.color ? { color: skill.color } : undefined;

// Icon height + margin must equal text line height so they align properly.
const iconClass = cn("my-0.5 size-5 sm:my-1");
const textClass = cn(
  "text-sm font-medium text-color-text-primary sm:text-base",
);
---

<div class="flex flex-col gap-1.5">
  <div class="flex items-center gap-2">
    {
      skill.icon && (
        <Icon name={skill.icon} style={iconStyle} class={iconClass} />
      )
    }
    <Linkable class={textClass} href={skill.url}>
      {skill.name}
    </Linkable>
  </div>
  <div>
    <div class="flex gap-1">
      {
        Array.from({ length: maxLevel }, (_, i) => (
          <div
            class={`h-1.5 flex-1 rounded-sm sm:h-2 ${i < level ? "bg-color-bg-dark" : "bg-color-bg-main"}`}
          />
        ))
      }
    </div>
  </div>
</div>
