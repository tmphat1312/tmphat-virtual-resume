---
import type { ComponentProps } from "astro/types";

import Linkable from "@/components/linkable.astro";
import RenderedContent from "@/pdf/components/rendered-content.astro";
import { RelatedSkills } from "@/pdf/components/skills";
import type { AsyncEntry } from "@/types/entries";
import type { Configurable } from "@/utils/configurable";
import { shouldDisplay } from "@/utils/configurable";
import { formatDate } from "@/utils/format-date";
import { removeTopElement } from "@/utils/html-string";
import { markdownToHtml } from "@/utils/markdown-to-html";

interface Props {
  /** An entry from the `achievements` collection. */
  entry: AsyncEntry<"achievements">;

  /** Configuration for achievement related skills. Pass `null` to hide related skills. */
  relatedSkills?: Configurable<
    Pick<ComponentProps<typeof RelatedSkills>, "label" | "include" | "exclude">
  >;
}

const { entry, relatedSkills } = Astro.props;
const { data: achievement, body, render } = await entry;

const date = achievement.date && formatDate(achievement.date, Astro);
---

<div class="grid gap-2">
  <div>
    <Linkable
      class="text-sm font-black text-color-text-title"
      href={achievement.url}>
      {achievement.name}
    </Linkable>
    {
      achievement.issuer && (
        <div
          class="text-sm font-medium text-color-text-title"
          set:html={removeTopElement(markdownToHtml(achievement.issuer))}
        />
      )
    }
    {
      date && (
        <div class="text-sm font-normal text-color-text-primary">{date}</div>
      )
    }
  </div>
  {body.trim().length > 0 && <RenderedContent {render} />}
  {
    achievement.skills && shouldDisplay(relatedSkills) && (
      <RelatedSkills skillRefs={achievement.skills} {...relatedSkills} />
    )
  }
</div>
